Python 连接 MySQL 的驱动程序 MySQL Connector/Python 之前想用这个弄了半天在2.7下不行在看看
MySQL Connector/Python 是一个用 Python 语言实现的 MySQL 客户端服务器的连接协议。该软件包无需安装任何 MySQL 的软件。
提供了支持Python 2.7/3.2两个 版本，可处理大的数据包，支持连接压缩协议和SSL。
MySQL Connector/Python 是 MySQL 官方提供的 Python 连接 MySQL 数据库的驱动程序。
最近在学习Python，发现Python的众多类库给Python开发带来了极大的便利性。
由于项目中使用Mysql，就考虑尝试使用Python调用Mysql，方便写一些调试用的小程序代码。
步骤如下：
1）到Python.org上查找所用的包，我下载的是mysql.connector。
2）代码编写，import mysql.connector：
主要分为5个步骤：
（a）连接数据库： conn = mysql.connector.connect(host='localhost', user='root',passwd='pwd',db='test')
（b）获取操作句柄：cursor = conn.cursor()
（c）执行sql：cursor.execute(sql)、cursor.executemany(sql, val)
（d）获取查询结果：alldata = cursor.fetchall()
（e）关闭连接：cursor.close()、conn.close()










python连接MySQL数据库讲解
2010-09-25 08:39:30     我来说两句       收藏     我要投稿
模块功能：connect()方法
        * connect()方法用于连接数据库，返回一个数据库连接对象。如果要连接一个位于host.remote.com服务器上名为fourm的MySQL数据库，连接串可以这样写：
        db = MySQLdb.connect(host="remote.com",user="user",passwd="xxx",db="fourm" )
connect()的参数列表如下：
        host，连接的数据库服务器主机名，默认为本地主机(localhost)。   
        user，连接数据库的用户名，默认为当前用户。
        passwd，连接密码，没有默认值。
        db，连接的数据库名，没有默认值。
        conv，将文字映射到Python类型的字典。默认为MySQLdb.converters.conversions
        cursorclass，cursor()使用的种类，默认值为MySQLdb.cursors.Cursor。
        compress，启用协议压缩功能。
        named_pipe，在windows中，与一个命名管道相连接。
        init_command，一旦连接建立，就为数据库服务器指定一条语句来运行。              
        read_default_file，使用指定的MySQL配置文件。
        read_default_group，读取的默认组。
        unix_socket，在unix中，连接使用的套接字，默认使用TCP。
        port，指定数据库服务器的连接端口，默认是3306。

* 连接对象的db.close()方法可关闭数据库连接，并释放相关资源。
* 连接对象的db.cursor([cursorClass])方法返回一个指针对象，用于访问和操作数据库中的数据。
* 连接对象的db.begin()方法用于开始一个事务，如果数据库的AUTOCOMMIT已经开启就关闭它，直到事务调用commit()和rollback()结束。
*连接对象的db.commit()和db.rollback()方法分别表示事务提交和回退。
*指针对象的cursor.close()方法关闭指针并释放相关资源。
*指针对象的cursor.execute(query[,parameters])方法执行数据库查询。
*指针对象的cursor.fetchall()可取出指针结果集中的所有行，返回的结果集一个元组(tuples)。
*指针对象的cursor.fetchmany([size=cursor.arraysize])从查询结果集中取出多行，我们可利用可选的参数指定取出的行数。
*指针对象的cursor.fetchone()从查询结果集中返回下一行。
*指针对象的cursor.arraysize属性指定由cursor.fetchmany()方法返回行的数目，影响fetchall()的性能，默认值为1。
*指针对象的cursor.rowcount属性指出上次查询或更新所发生行数。-1表示还没开始查询或没有查询到数据。

模块功能演示
#!/usr/bin/python
import MySQLdb
try:
   connection = MySQLdb.connect(user="user",passwd="password",host="xxx",db="test")
except:
   print "Could not connect to MySQL server."
   exit( 0 )

try:
   cursor = connection.cursor()
   cursor.execute( "SELECT note_id,note_detail FROM note where note_id = 1" )
   print "Rows selected:", cursor.rowcount
   
   for row in cursor.fetchall():
       print "note : ", row[0], row[1]
   cursor.close()
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   python操作Excel读写--使用xlrd
一、安装xlrd模块
   到python官网下载http://pypi.python.org/pypi/xlrd模块安装，前提是已经安装了python 环境。
二、使用介绍
  1、导入模块
      import xlrd
   2、打开Excel文件读取数据
       data = xlrd.open_workbook('excelFile.xls')
   3、使用技巧
        获取一个工作表
 
        table = data.sheets()[0]          #通过索引顺序获取
 
        table = data.sheet_by_index(0) #通过索引顺序获取
 
        table = data.sheet_by_name(u'Sheet1')#通过名称获取
 
        获取整行和整列的值（数组）
 　　
         table.row_values(i)
 
         table.col_values(i)
 
        获取行数和列数
　　
        nrows = table.nrows
 
        ncols = table.ncols
       
        循环行列表数据
        for i in range(nrows ):
      print table.row_values(i)
 
单元格
cell_A1 = table.cell(0,0).value
 
cell_C4 = table.cell(2,3).value
 
使用行列索引
cell_A1 = table.row(0)[0].value
 
cell_A2 = table.col(1)[0].value
 
简单的写入
row = 0
 
col = 0
 
# 类型 0 empty,1 string, 2 number, 3 date, 4 boolean, 5 error
ctype = 1 value = '单元格的值'
 
xf = 0 # 扩展的格式化
 
table.put_cell(row, col, ctype, value, xf)
 
table.cell(0,0)  #单元格的值'
 
table.cell(0,0).value #单元格的值'
 
 
三、Demo代码
   Demo代码其实很简单，就是读取Excel数据。
   

 1 # -*- coding: utf-8 -*- 
 2 import  xdrlib ,sys
 3 import xlrd
 4 def open_excel(file= 'file.xls'):
 5     try:
 6         data = xlrd.open_workbook(file)
 7         return data
 8     except Exception,e:
 9         print str(e)
10 #根据索引获取Excel表格中的数据   参数:file：Excel文件路径     colnameindex：表头列名所在行的所以  ，by_index：表的索引
11 def excel_table_byindex(file= 'file.xls',colnameindex=0,by_index=0):
12     data = open_excel(file)
13     table = data.sheets()[by_index]
14     nrows = table.nrows #行数
15     ncols = table.ncols #列数
16     colnames =  table.row_values(colnameindex) #某一行数据 
17     list =[]
18     for rownum in range(1,nrows):
19 
20          row = table.row_values(rownum)
21          if row:
22              app = {}
23              for i in range(len(colnames)):
24                 app[colnames[i]] = row[i] 
25              list.append(app)
26     return list
27 
28 #根据名称获取Excel表格中的数据   参数:file：Excel文件路径     colnameindex：表头列名所在行的所以  ，by_name：Sheet1名称
29 def excel_table_byname(file= 'file.xls',colnameindex=0,by_name=u'Sheet1'):
30     data = open_excel(file)
31     table = data.sheet_by_name(by_name)
32     nrows = table.nrows #行数 
33     colnames =  table.row_values(colnameindex) #某一行数据 
34     list =[]
35     for rownum in range(1,nrows):
36          row = table.row_values(rownum)
37          if row:
38              app = {}
39              for i in range(len(colnames)):
40                 app[colnames[i]] = row[i]
41              list.append(app)
42     return list
43 
44 def main():
45    tables = excel_table_byindex()
46    for row in tables:
47        print row
48 
49    tables = excel_table_byname()
50    for row in tables:
51        print row
52 
53 if __name__=="__main__":
54     main()
