 #pragma warning(disable:4996)
分类： Operator 2013-07-30 14:13 22人阅读 评论(0) 收藏 举报
今天读程序遇到了这句话，第一次看见。在网上搜到了如下资料：

1.       #pragma warning只对当前文件有效（对于.h，对包含它的cpp也是有效的），而不是对整个工程的所有文件有效。当该文件编译结束，设置也就失去作用。

2.       #pragma warning(push) 存储当前报警设置。

        #pragma warning(push, n) 存储当前报警设置，并设置报警级别为n。n为从1到4的自然数。

3.       #pragma warning(pop) 恢复之前压入堆栈的报警设置。在一对push和pop之间作的任何报警相关设置都将失效。

4.       #pragma warning(disable: n)将某个警报置为失效

5.       #pragma warning(default: n)将报警置为默认

6.       某些警告如C4309是从上到下生效的。即文件内#pragma warning从上到下遍历，依次生效。

　　　　例如：

　　　　void func()

　　　　{

     　　 #pragma warning(disable: 4189)

     　　 char s;

     　　 s = 128;

     　　 #pragma warning(default: 4189)

     　　 char c;

    　　  c = 128;

　　　　}

　　　　则s = 128不会产生C4309报警，而C4309会产生报警。

7.       某些警告例如C4189是以函数中最后出现的#pragma warning设置为准的，其余针对该报警的设置都是无效的。

　　　　例如：

　　　　void func()

　　　　{

      　　　　#pragma warning(disable: 4189)

     　　　　 int x = 1;

      　　　　#pragma warning(default: 4189)

　　　　}

　　　　则C4189仍然会出现，因为default指令是函数的最后一条。在该文件内的其他函数中，如果没有重新设置，C4189也是以#pragma warning(default: 4189)为准。如果重新设置，同样是按照其函数中的最后一个#pragma warning为准。

8.       某些警告（MSDN认为是大于等于C4700的警告）是在函数结束后才能生效。

　　　　例如：

　　　　#pragma warning(disable:4700)

　　　　void Func()

　　　　{

　　　　　　int x;

　　　　　　int y = x;  

       　　   #pragma warning(default:4700)  

      　　     int z= x;

　　　　}

　　　　则y = x和z = x都不会产生C4700报警。只有在函数结束后的后的另外一个函数中，#pragma warning(default:4700)才能生效。

 

关于#pragma的其他信息，参考百度百科：http://baike.baidu.com/view/1451188.html

 

 

每个编译程序可以用#pragma指令激活或终止该编译程序支持的一些编译功能。例如，对循环优化功能：  
#pragma loop_opt(on) // 激活

在这里写的代码，编译器就会对循环进行优化了

#pragma loop_opt(off) // 终止  
有时，程序中会有些函数会使编译器发出你熟知而想忽略的警告，如“Parameter xxx is never used in function xxx”，可以这样：  
#pragma warn ―100 // Turn off the warning message for warning #100  
int insert_record(REC *r)  
{ /* function body */ }  
#pragma warn +100 // Turn the warning message for warning #100 back on  
函数会产生一条有唯一特征码100的警告信息，如此可暂时终止该警告。  
每个编译器对#pragma的实现不同，在一个编译器中有效在别的编译器中几乎无效。可从编译器的文档中查看。